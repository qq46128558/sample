#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 汉诺塔的移动可以用递归函数非常简单地实现。
# 编写move(n, a, b, c)函数，它接收参数n，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法，例如：
# 期待输出:
# A --> C
# A --> B
# C --> B
# A --> C
# B --> A
# B --> C
# A --> C
# move(3, 'A', 'B', 'C')
# 用极限法,以2个盘子去理解会快一点(n-1是上面的盘子,1是最底的盘子)
# 理解方法2:将最底的盘子当成盘子1, 其他盘子捆绑成一个盘子n-1, 然后递归拆分捆绑的盘子为1和n-1
def move(n,a,b,c):
    if n==1:
        print('move %s-->%s'%(a,c))
    else:
        # 将上面的一个盘子移到b位置
        move(n-1,a,c,b)
        # 将最底的盘子移到c位置
        move(1,a,b,c)
        # 再将刚才b位置的盘子,移到c位置
        move(n-1,b,a,c)
move(3,'A','B','C')
# move(5,'A','B','C')