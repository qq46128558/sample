#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。
# 举个例子，我们来计算阶乘n! = 1 x 2 x 3 x ... x n
def fact(n):
    if (n==1):
        return n
    return n*fact(n-1)
print('01.',fact(5))
# 使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。可以试试fact(1000)：

''' 解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的。
尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。
上面的fact(n)函数由于return n * fact(n - 1)引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中： '''
def fact2(num,product=1):
    if num==1:
        return product
    return fact2(num-1,num*product)
print('02.',fact2(5))
# 可以看到，return fact_iter(num - 1, num * product)仅返回递归函数本身，num - 1和num * product在函数调用前就会被计算，不影响函数调用。
# 尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。
''' 遗憾的是，大多数编程语言没有针对尾递归做优化，Python解释器也没有做优化，所以，即使把上面的fact(n)函数改成尾递归方式，也会导致栈溢出 '''

# 汉诺塔的移动可以用递归函数非常简单地实现。
# 编写move(n, a, b, c)函数，它接收参数n，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法，例如：
# 期待输出:
# A --> C
# A --> B
# C --> B
# A --> C
# B --> A
# B --> C
# A --> C
# move(3, 'A', 'B', 'C')
# 用极限法,以2个盘子去理解会快一点(n-1是上面的盘子,1是最底的盘子)
# 理解方法2:将最底的盘子当成盘子1, 其他盘子捆绑成一个盘子n-1, 然后递归拆分捆绑的盘子为1和n-1
def move(n,a,b,c):
    if n==1:
        print('move %s-->%s'%(a,c))
    else:
        # 将上面的一个盘子移到b位置
        move(n-1,a,c,b)
        # 将最底的盘子移到c位置
        move(1,a,b,c)
        # 再将刚才b位置的盘子,移到c位置
        move(n-1,b,a,c)
move(3,'A','B','C')
